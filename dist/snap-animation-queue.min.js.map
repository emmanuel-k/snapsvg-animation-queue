{"version":3,"sources":["snap-animation-queue.js"],"names":["SnapAnimationQueue","this","animationQueue","_totalDuration","_startTime","_lapsedTime","_timerForComplete","onCompleteCallback","defaultOptions","easing","mina","easeinout","delay","callback","prototype","add","elem","duration","attrs","callbackFn","newDelay","operator","substring","parseFloat","timeout","window","setTimeout","animate","_computeDuration","push","startingTime","Date","now","newDuration","Math","max","leavingTime","abs","_setOnCompleteTimer","whenAnimationsEnded","self","clearTimeout"],"mappings":";;;AAOA,QAASA,sBACLC,KAAKC,kBACLD,KAAKE,eAAiB,EACtBF,KAAKG,WAAa,KAClBH,KAAKI,YAAc,KACnBJ,KAAKK,kBAAoB,KACzBL,KAAKM,mBAAqB,KAE1BN,KAAKO,gBACDC,OAAQC,KAAKC,UACbC,MAAO,EACPC,SAAU,MAclBb,mBAAmBc,UAAUC,IAAM,SAAUC,EAAMC,EAAUC,EAAOT,EAAQG,EAAOO,GAC/E,IAAIH,GAAwB,gBAATE,GAAmB,MAAOjB,KAC7CQ,GAASA,GAAUR,KAAKO,eAAeC,MAEvC,IAAIW,EAEJ,IAAmB,gBAATR,GACV,CACI,GAAIS,GAAWT,EAAMU,UAAU,EAAE,EAElB,OAAZD,GACCD,EAAWG,WAAWtB,KAAKE,gBAAkBoB,WAAWX,EAAMU,UAAU,IACxEF,EAAYA,EAAW,EAAK,EAAIA,GAGhCA,EADgB,MAAZC,EACOE,WAAWtB,KAAKE,gBAAkBoB,WAAWX,EAAMU,UAAU,IAG7DC,WAAWX,OAI1BQ,GADoB,mBAATR,GACAX,KAAKE,eAGLS,CAGf,IAAIY,GAAUC,OAAOC,WAAW,WAC5BV,EAAKW,QAAQT,EAAOD,EAAUR,EAAQU,IACxCC,EAWF,OATAnB,MAAK2B,iBAAiBX,EAAUL,GAChCX,KAAKC,eAAe2B,MAChBb,KAAMA,EACNC,SAAUA,EACVa,aAAcV,EACdI,QAASA,IAINvB,MASXD,mBAAmBc,UAAUc,iBAAmB,SAAUX,EAAUL,GAG5DX,KAAKG,aACLH,KAAKG,WAAa2B,KAAKC,OAG3B/B,KAAKI,YAAc0B,KAAKC,MAAQ/B,KAAKG,UACrC,IAAI6B,EAEJ,IAAmB,gBAATrB,GACV,CACI,GAAIS,GAAWT,EAAMU,UAAU,EAAE,EAElB,OAAZD,GACCY,EAAcV,WAAWtB,KAAKE,gBAAkBoB,WAAWX,EAAMU,UAAU,IAC3EW,EAAeA,EAAc,EAAK,EAAIA,EACtCA,GAAehB,GAEC,MAAZI,GACJY,EAAcV,WAAWtB,KAAKE,gBAAkBoB,WAAWX,EAAMU,UAAU,IAC3EW,GAAehB,GAGfgB,EAAcC,KAAKC,IAAIZ,WAAWX,GAAOK,EAAUhB,KAAKE,oBAI5D8B,GADoB,mBAATrB,GACGX,KAAKE,eAAiBc,EAGtBiB,KAAKC,IAAIZ,WAAWX,GAAOK,EAAUhB,KAAKE,eAG5DF,MAAKE,eAAiB8B,CAEtB,IAAIG,GAAcF,KAAKG,IAAIpC,KAAKE,eAAiBF,KAAKI,YACtDJ,MAAKqC,oBAAoBF,IAM7BpC,mBAAmBc,UAAUyB,oBAAsB,WAC/CtC,KAAKC,kBACLD,KAAKE,eAAiB,EACtBF,KAAKG,WAAa,KAClBH,KAAKI,YAAc,KACnBJ,KAAKK,kBAAoB,KACzBL,KAAKM,mBAAqB,MAG9BP,mBAAmBc,UAAUwB,oBAAsB,SAAU1B,GACzD,GAAI4B,GAAOvC,IACRA,MAAKK,oBACJmB,OAAOgB,aAAaxC,KAAKK,mBACzBL,KAAKK,kBAAmB,MAG5BL,KAAKK,kBAAoBmB,OAAOC,WAAW,WACF,kBAA3Bc,GAAKjC,oBAAkCiC,EAAKjC,mBAAmBiC,GACzEA,EAAKD,uBACN3B","file":"snap-animation-queue.min.js","sourcesContent":["/**\r\n * Created by ken on 14/11/2016.\r\n */\r\n/**\r\n *\r\n * @constructor\r\n */\r\nfunction SnapAnimationQueue() {\r\n    this.animationQueue = [];\r\n    this._totalDuration = 0;\r\n    this._startTime = null;\r\n    this._lapsedTime = null;\r\n    this._timerForComplete = null;\r\n    this.onCompleteCallback = null;\r\n\r\n    this.defaultOptions = {\r\n        easing: mina.easeinout,\r\n        delay: 0,\r\n        callback: null\r\n    };\r\n}\r\n\r\n/**\r\n * Adding a new animation to the queue\r\n * @param elem Snap\r\n * @param duration {int}\r\n * @param attrs {object}\r\n * @param easing {null|easing}\r\n * @param delay {null|int}\r\n * @param callbackFn\r\n * @returns {SnapAnimationQueue}\r\n */\r\nSnapAnimationQueue.prototype.add = function (elem, duration, attrs, easing, delay, callbackFn) {\r\n    if(!elem || typeof attrs != 'object') return this;\r\n    easing = easing || this.defaultOptions.easing;\r\n\r\n    var newDelay;\r\n\r\n    if(typeof delay == 'string')\r\n    {\r\n        var operator = delay.substring(0,2);\r\n\r\n        if(operator == '-=') {\r\n            newDelay = parseFloat(this._totalDuration) - parseFloat(delay.substring(2));\r\n            newDelay = (newDelay < 0) ? 0 : newDelay;\r\n        }\r\n        else if(operator == '+=') {\r\n            newDelay = parseFloat(this._totalDuration) + parseFloat(delay.substring(2));\r\n        }\r\n        else {\r\n            newDelay = parseFloat(delay);\r\n        }\r\n    }\r\n    else if(typeof delay == 'undefined') {\r\n        newDelay = this._totalDuration;\r\n    }\r\n    else {\r\n        newDelay = delay;\r\n    }\r\n\r\n    var timeout = window.setTimeout(function(){\r\n        elem.animate(attrs, duration, easing, callbackFn);\r\n    },newDelay);\r\n\r\n    this._computeDuration(duration, delay);\r\n    this.animationQueue.push({\r\n        elem: elem,\r\n        duration: duration,\r\n        startingTime: newDelay,\r\n        timeout: timeout\r\n    });\r\n\r\n    //console.log(this._lapsedTime);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Compute the total duration of the queue\r\n * @param duration\r\n * @param delay\r\n * @private\r\n */\r\nSnapAnimationQueue.prototype._computeDuration = function (duration, delay) {\r\n\r\n    // If it's a first add\r\n    if(!this._startTime) {\r\n        this._startTime = Date.now();\r\n    }\r\n\r\n    this._lapsedTime = Date.now() - this._startTime;\r\n    var newDuration;\r\n\r\n    if(typeof delay == 'string')\r\n    {\r\n        var operator = delay.substring(0,2);\r\n\r\n        if(operator == '-=') {\r\n            newDuration = parseFloat(this._totalDuration) - parseFloat(delay.substring(2));\r\n            newDuration = (newDuration < 0) ? 0 : newDuration;\r\n            newDuration += duration;\r\n        }\r\n        else if(operator == '+=') {\r\n            newDuration = parseFloat(this._totalDuration) + parseFloat(delay.substring(2));\r\n            newDuration += duration;\r\n        }\r\n        else {\r\n            newDuration = Math.max(parseFloat(delay)+duration, this._totalDuration);\r\n        }\r\n    }\r\n    else if(typeof delay == 'undefined') {\r\n        newDuration = this._totalDuration + duration;\r\n    }\r\n    else {\r\n        newDuration = Math.max(parseFloat(delay)+duration, this._totalDuration);\r\n    }\r\n\r\n    this._totalDuration = newDuration;\r\n\r\n    var leavingTime = Math.abs(this._totalDuration - this._lapsedTime);\r\n    this._setOnCompleteTimer(leavingTime);\r\n};\r\n\r\n/**\r\n * Intern setting when animations ended\r\n */\r\nSnapAnimationQueue.prototype.whenAnimationsEnded = function () {\r\n    this.animationQueue = [];\r\n    this._totalDuration = 0;\r\n    this._startTime = null;\r\n    this._lapsedTime = null;\r\n    this._timerForComplete = null;\r\n    this.onCompleteCallback = null;\r\n};\r\n\r\nSnapAnimationQueue.prototype._setOnCompleteTimer = function (delay) {\r\n    var self = this;\r\n    if(this._timerForComplete) {\r\n        window.clearTimeout(this._timerForComplete);\r\n        this._timerForComplete= null;\r\n    }\r\n\r\n    this._timerForComplete = window.setTimeout(function(){\r\n        if(typeof self.onCompleteCallback == 'function') self.onCompleteCallback(self);\r\n        self.whenAnimationsEnded();\r\n    }, delay);\r\n};"]}